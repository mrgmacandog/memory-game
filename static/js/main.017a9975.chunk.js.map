{"version":3,"sources":["components/Header/index.js","components/ClickImage/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","href","currScore","highScore","ClickImage","onClick","updateScore","id","alt","name","src","image","App","state","charactersRemaining","characters","shuffleArray","array","i","length","j","Math","floor","random","_ref","_this","checkIfChosen","alert","setState","filter","character","_this2","this","Fragment","components_Header","map","components_ClickImage","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"smFAgBeA,MAbf,SAAgBC,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,KAAK,KAAjC,eACAJ,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,2BAAmBH,EAAMM,WACzBL,EAAAC,EAAAC,cAAA,wBAAgBH,EAAMO,oBCKvBC,MAZf,SAAoBR,GAChB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWK,QAAS,kBAAMT,EAAMU,YAAYV,EAAMW,MAC7DV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAEPH,EAAAC,EAAAC,cAAA,OAAKS,IAAKZ,EAAMa,KAAMC,IAAKd,EAAMe,WCoGtCC,6MApGdC,MAAQ,CACPX,UAAW,EACXC,UAAW,EACXW,oBAAqBC,KAQtBC,aAAe,SAAAC,GACd,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC1C,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADAM,EAEnB,CAACP,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFmCM,EAAA,GAE/BP,EAAMG,GAFyBI,EAAA,GAI3C,OAAOP,KAORX,YAAc,SAAAC,GAEb,GAAIkB,EAAKC,cAAcnB,GAEtBoB,MAAM,qBACNF,EAAKG,SAAS,CACb1B,UAAW,EACXY,oBAAqBC,QAEhB,CAEN,IAAIb,EAAYuB,EAAKZ,MAAMX,UAAY,EACnCC,EAAYsB,EAAKZ,MAAMV,UAGvBD,EAAYC,IACfA,EAAYD,GAIbuB,EAAKG,SAAS,CACb1B,UAAWA,EACXC,UAAWA,QAWduB,cAAgB,SAAAnB,GAEf,IAAIO,EAAsBW,EAAKZ,MAAMC,oBAAoBe,OAAO,SAAAC,GAAS,OAAIA,EAAUvB,KAAOA,IAI9F,OAAIO,EAAoBK,QAAUM,EAAKZ,MAAMC,oBAAoBK,SAKhEM,EAAKG,SAAS,CAAEd,oBAAqBA,KAG9B,4EAIA,IAAAiB,EAAAC,KACR,OACCnC,EAAAC,EAAAC,cAACF,EAAAC,EAAMmC,SAAP,KACCpC,EAAAC,EAAAC,cAACmC,EAAD,CACChC,UAAW8B,KAAKnB,MAAMX,UACtBC,UAAW6B,KAAKnB,MAAMV,YAEvBN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbgC,KAAKhB,aAAaD,GAAYoB,IAAI,SAAAL,GAAS,OAC3CjC,EAAAC,EAAAC,cAACqC,EAAD,CACCC,IAAKP,EAAUvB,GACfA,GAAIuB,EAAUvB,GACdE,KAAMqB,EAAUrB,KAChBE,MAAOmB,EAAUnB,MACjBL,YAAayB,EAAKzB,0BA5FRgC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.017a9975.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Header(props) {\n    return (\n        <nav className=\"navbar navbar-light bg-light\">\n            <a className=\"navbar-brand\" href=\"/\">Memory Game</a>\n            <p>Click an image!</p>\n            <div>\n                <p>Current Score: {props.currScore}</p>\n                <p>High Score: {props.highScore}</p>\n            </div>\n        </nav>\n    );\n}\n\nexport default Header;","import React from \"react\";\nimport \"./style.css\";\n\nfunction ClickImage(props) {\n    return (\n        <div className=\"col-md-3\" onClick={() => props.updateScore(props.id)}>\n            <div className=\"card\">\n                {/* <div className=\"img-container\"> */}\n                    <img alt={props.name} src={props.image} />\n                {/* </div> */}\n            </div>\n        </div>\n    );\n}\n\nexport default ClickImage;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport characters from \"./characters.json\";\nimport Header from \"./components/Header\";\nimport ClickImage from \"./components/ClickImage\";\n\nclass App extends Component {\n\t// App state\n\tstate = {\n\t\tcurrScore: 0,\n\t\thighScore: 0,\n\t\tcharactersRemaining: characters\n\t}\n\n\t/**\n\t * Shuffles the order of an array\n\t * @param {Array} array array of any type\n\t * @return {Array}\t\tpassed in array shuffled\n\t */\n\tshuffleArray = array => {\n\t\tfor (let i = array.length - 1; i > 0; i--) {\n\t\t\tconst j = Math.floor(Math.random() * (i + 1));\n\t\t\t[array[i], array[j]] = [array[j], array[i]];\n\t\t}\n\t\treturn array;\n\t}\n\n\t/**\n\t * Updates the currScore depending on the id\n\t * @param {int} id chosen character id\n\t */\n\tupdateScore = id => {\n\t\t// If id has been chosen already\n\t\tif (this.checkIfChosen(id)) {\n\t\t\t// Reset game\n\t\t\talert(\"Game resetting...\");\n\t\t\tthis.setState({\n\t\t\t\tcurrScore: 0,\n\t\t\t\tcharactersRemaining: characters\n\t\t\t});\n\t\t} else {\n\t\t\t// Get currScore and increase by 1\n\t\t\tlet currScore = this.state.currScore + 1;\n\t\t\tlet highScore = this.state.highScore;\n\n\t\t\t// Increase highScore if currScore > highScore\n\t\t\tif (currScore > highScore) {\n\t\t\t\thighScore = currScore;\n\t\t\t}\n\n\t\t\t// Update the state of currScore and highScore\n\t\t\tthis.setState({\n\t\t\t\tcurrScore: currScore,\n\t\t\t\thighScore: highScore\n\t\t\t});\n\t\t}\n\t};\n\n\t/**\n\t * Checks to see if the id has already been chosen\n\t * @param {int} id \t\tchosen character id\n\t * @return {boolean}\ttrue if character has already been chosen\n\t * \t\t\t\t\t\tfalse if character had not been chosen\n\t */\n\tcheckIfChosen = id => {\n\t\t// Filter out chosen id\n\t\tlet charactersRemaining = this.state.charactersRemaining.filter(character => character.id !== id);\n\n\t\t// If the filtered charactersRemaining length is the same as the state's charactersRemaining length\n\t\t//     (i.e. nothing was filtered out above)\n\t\tif (charactersRemaining.length >= this.state.charactersRemaining.length) {\n\t\t\t// Character has already been chosen\n\t\t\treturn true;\n\t\t} else {  // A character has been filtered out\n\t\t\t// Update state of charactersRemaining\n\t\t\tthis.setState({ charactersRemaining: charactersRemaining });\n\n\t\t\t// Character has not been chosen before\n\t\t\treturn false;\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment >\n\t\t\t\t<Header \n\t\t\t\t\tcurrScore={this.state.currScore}\n\t\t\t\t\thighScore={this.state.highScore}\n\t\t\t\t/>\n\t\t\t\t<div className=\"container App\">\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t{/* Shuffle all the characters and then return a ClickImage for each of them */}\n\t\t\t\t\t\t{this.shuffleArray(characters).map(character =>\n\t\t\t\t\t\t\t<ClickImage\n\t\t\t\t\t\t\t\tkey={character.id}\n\t\t\t\t\t\t\t\tid={character.id}\n\t\t\t\t\t\t\t\tname={character.name}\n\t\t\t\t\t\t\t\timage={character.image}\n\t\t\t\t\t\t\t\tupdateScore={this.updateScore}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}